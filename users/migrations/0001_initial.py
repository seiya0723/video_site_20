# Generated by Django 3.2.7 on 2021-09-17 10:42

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('handle_name', models.CharField(max_length=150, verbose_name='Handle_name')),
                ('email', models.EmailField(max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('usericon', models.ImageField(blank=True, null=True, upload_to='tube/usericon/', verbose_name='ユーザーアイコン')),
                ('self_introduction', models.CharField(blank=True, default='自己紹介欄', max_length=300, null=True, verbose_name='自己紹介')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='PrivateUser',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('dt', models.DateTimeField(default=django.utils.timezone.now, verbose_name='招待した日時')),
                ('from_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='private_from_user', to=settings.AUTH_USER_MODEL, verbose_name='招待者')),
                ('to_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='private_to_user', to=settings.AUTH_USER_MODEL, verbose_name='招待されたユーザー')),
            ],
            options={
                'db_table': 'privateuser',
            },
        ),
        migrations.CreateModel(
            name='FollowUser',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('dt', models.DateTimeField(default=django.utils.timezone.now, verbose_name='フォロした日時')),
                ('from_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='follow_from_user', to=settings.AUTH_USER_MODEL, verbose_name='フォロー元のユーザー')),
                ('to_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='follow_to_user', to=settings.AUTH_USER_MODEL, verbose_name='フォロー対象のユーザー')),
            ],
            options={
                'db_table': 'followuser',
            },
        ),
        migrations.CreateModel(
            name='BlockUser',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('dt', models.DateTimeField(default=django.utils.timezone.now, verbose_name='ブロックした日時')),
                ('from_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='block_from_user', to=settings.AUTH_USER_MODEL, verbose_name='ブロック元のユーザー')),
                ('to_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='block_to_user', to=settings.AUTH_USER_MODEL, verbose_name='ブロック対象のユーザー')),
            ],
            options={
                'db_table': 'blockuser',
            },
        ),
        migrations.AddField(
            model_name='customuser',
            name='blocked',
            field=models.ManyToManyField(blank=True, related_name='_users_customuser_blocked_+', through='users.BlockUser', to=settings.AUTH_USER_MODEL, verbose_name='ブロック'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='followed',
            field=models.ManyToManyField(blank=True, related_name='_users_customuser_followed_+', through='users.FollowUser', to=settings.AUTH_USER_MODEL, verbose_name='フォロー'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='private',
            field=models.ManyToManyField(blank=True, related_name='_users_customuser_private_+', through='users.PrivateUser', to=settings.AUTH_USER_MODEL, verbose_name='プライベート'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
